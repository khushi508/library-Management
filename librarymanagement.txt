import datetime

class Book:
    def __init__(self, book_id, title, author, quantity):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.quantity = quantity

    def __str__(self):
        return f"Book[ID={self.book_id}, Title={self.title}, Author={self.author}, Quantity={self.quantity}]"


class User:
    def __init__(self, user_id, name):
        self.user_id = user_id
        self.name = name
        self.issued_books = []  # List of tuples: (book, issue_date)

    def __str__(self):
        return f"User[ID={self.user_id}, Name={self.name}, IssuedBooks={len(self.issued_books)}]"


class Library:
    def __init__(self):
        self.books = {}
        self.users = {}
        self.fine_per_day = 1  # Fine per day for late returns

    def add_book(self, book_id, title, author, quantity):
        if book_id in self.books:
            self.books[book_id].quantity += quantity
        else:
            self.books[book_id] = Book(book_id, title, author, quantity)
        print(f"Book added: {title}")

    def remove_book(self, book_id):
        if book_id in self.books:
            removed_book = self.books.pop(book_id)
            print(f"Book removed: {removed_book.title}")
        else:
            print("Book ID not found.")

    def search_book(self, query):
        results = [book for book in self.books.values() if query.lower() in book.title.lower() or query.lower() in book.author.lower()]
        if results:
            print("Search Results:")
            for book in results:
                print(book)
        else:
            print("No books found matching the query.")

    def add_user(self, user_id, name):
        if user_id not in self.users:
            self.users[user_id] = User(user_id, name)
            print(f"User added: {name}")
        else:
            print("User ID already exists.")

    def remove_user(self, user_id):
        if user_id in self.users:
            removed_user = self.users.pop(user_id)
            print(f"User removed: {removed_user.name}")
        else:
            print("User ID not found.")

    def issue_book(self, user_id, book_id):
        if user_id not in self.users:
            print("User ID not found.")
            return
        if book_id not in self.books:
            print("Book ID not found.")
            return

        user = self.users[user_id]
        book = self.books[book_id]

        if book.quantity > 0:
            book.quantity -= 1
            issue_date = datetime.date.today()
            user.issued_books.append((book, issue_date))
            print(f"Book issued: {book.title} to {user.name} on {issue_date}")
        else:
            print("Book out of stock.")

    def return_book(self, user_id, book_id):
        if user_id not in self.users:
            print("User ID not found.")
            return
        
        user = self.users[user_id]
        book_to_return = next((item for item in user.issued_books if item[0].book_id == book_id), None)

        if book_to_return:
            user.issued_books.remove(book_to_return)
            book, issue_date = book_to_return
            self.books[book_id].quantity += 1
            return_date = datetime.date.today()
            days_late = (return_date - issue_date).days - 14  # Assuming a 14-day lending period
            fine = self.fine_per_day * max(days_late, 0)
            if fine > 0:
                print(f"Book returned late by {days_late} days. Fine: ${fine}")
            else:
                print("Book returned on time.")
            print(f"Book returned: {book.title} by {user.name}")
        else:
            print("Book not found in issued books.")

    def list_books(self):
        if self.books:
            print("Books in the Library:")
            for book in self.books.values():
                print(book)
        else:
            print("No books available in the library.")

    def list_users(self):
        if self.users:
            print("Users registered:")
            for user in self.users.values():
                print(user)
        else:
            print("No users registered.")

    def calculate_fine(self, user_id):
        if user_id not in self.users:
            print("User ID not found.")
            return

        user = self.users[user_id]
        total_fine = 0

        for book, issue_date in user.issued_books:
            days_late = (datetime.date.today() - issue_date).days - 14
            if days_late > 0:
                total_fine += days_late * self.fine_per_day

        print(f"Total fine for {user.name}: ${total_fine}")


# Main Program
def main():
    library = Library()

    while True:
        print("\n--- Library Management System ---")
        print("1. Add Book")
        print("2. Remove Book")
        print("3. Search Book")
        print("4. Add User")
        print("5. Remove User")
        print("6. Issue Book")
        print("7. Return Book")
        print("8. List Books")
        print("9. List Users")
        print("10. Calculate Fine")
        print("11. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            book_id = input("Enter Book ID: ")
            title = input("Enter Title: ")
            author = input("Enter Author: ")
            quantity = int(input("Enter Quantity: "))
            library.add_book(book_id, title, author, quantity)
        elif choice == "2":
            book_id = input("Enter Book ID: ")
            library.remove_book(book_id)
        elif choice == "3":
            query = input("Enter title or author to search: ")
            library.search_book(query)
        elif choice == "4":
            user_id = input("Enter User ID: ")
            name = input("Enter User Name: ")
            library.add_user(user_id, name)
        elif choice == "5":
            user_id = input("Enter User ID: ")
            library.remove_user(user_id)
        elif choice == "6":
            user_id = input("Enter User ID: ")
            book_id = input("Enter Book ID: ")
            library.issue_book(user_id, book_id)
        elif choice == "7":
            user_id = input("Enter User ID: ")
            book_id = input("Enter Book ID: ")
            library.return_book(user_id, book_id)
        elif choice == "8":
            library.list_books()
        elif choice == "9":
            library.list_users()
        elif choice == "10":
            user_id = input("Enter User ID: ")
            library.calculate_fine(user_id)
        elif choice == "11":
            print("Exiting Library Management System. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
